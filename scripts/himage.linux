#! /bin/sh 

command=`basename $0`

help() {
cat <<__END__

Command $command can be used as an interface to the docker command 
for virtual nodes. Hostname is used instead of docker names.
Hostname can be in the form: hostname or hostname@eid.

Usage:
  $command vi_hostname command
  $command -b vi_hostname command  ---> run in detached mode (background)
  $command -nt vi_hostname command ---> run without pseudo-tty (no-tty)
  $command -v vi_hostname  ---> docker full name (eid.nodename)
  $command -n vi_hostname  ---> docker node name (nodename)
  $command -e vi_hostname  ---> experiment eid name (eid)
  $command -i vi_hostname  ---> docker container id
  $command -l              ---> running experiments eids with experiment data
  $command -ln             ---> running experiments eids with node names
  $command -d              ---> dummy flag (used only on FreeBSD)
__END__
}


vi_name() {
  if test "`docker ps -q`" = ""; then
      echo Error: cannot find node named $1 >&2
      exit 2
  fi
  dockerps=`docker ps -q | xargs docker inspect -f '{{range $p, $conf := .}} {{if eq $p "Name"}} {{$conf}} {{end}} {{if eq $p "Id"}} {{$conf}} {{end}} {{if eq $p "Config"}} {{$conf.Hostname}} {{end}} {{end}}'`
  host=`echo $1 | cut -d@ -f1`
  if [ -n "`echo $1 | grep "@"`" ]; then
      expid=`echo $1 | cut -d@ -f2`
  fi

  n=`echo "$dockerps" | awk -v h=$host -v e="$expid.n[0-9]+$" '$1 == h && $3 ~ e {print}' | wc -l`
  if test $n -gt 1; then
        echo "Error: $1 is not a unique name." >&2
        echo "It is used (at least) for nodes:" >&2
        echo "$dockerps" | awk -v h=$host -v e="$expid.n[0-9]+$" '$1 == h && $3 ~ e {print}' >&2
        exit 1
  fi
  if test $n -eq 0; then
    get_explist nodes | grep -q $host
    if test $? -ne 0; then
	echo Error: cannot find node named $1 >&2
	exit 2
    else
	echo "Node $host is not a docker container." >&2
	exit 3
    fi
  fi
  echo "$dockerps" | awk -v h=$host -v e="$expid.n[0-9]+$" '$1 == h && $3 ~ e {print $2}'
}

get_explist() {
    explist1=`docker ps | grep "imunes" | awk '{print $NF}' | rev | cut -d. -f2- | sort -u | rev`
    explist2=`ovs-vsctl list-br | cut -d- -f1 | sort -u`
    explist3=`ip netns list | cut -d. -f1 | sort -u`
    explist=`echo $explist1 $explist2 $explist3 | tr ' ' '\n' | sort -u`
    for exp in $explist; do
	if test -r /var/run/imunes/$exp/; then
	    if test $1 = "nodes"; then
		data=`grep network-config -A 3 /var/run/imunes/$exp/config.imn | grep hostname | awk '{print $2}' | paste -s -d" " -`
	    else
		if test -r /var/run/imunes/$exp/name; then
		    exp_name=`cat /var/run/imunes/$exp/name`
		else
		    exp_name="N/A"
		fi
		exp_timestamp=`cat /var/run/imunes/$exp/timestamp`
		data="$exp_name - $exp_timestamp"
	    fi
	    echo "$exp ($data)"
	else
	    node_ids=`docker ps | grep "imunes" | grep "$exp" | awk '{print $NF}' | paste -s -d" " -`
	    echo "$exp (`docker inspect -f "{{.Config.Hostname}}" $node_ids | paste -s -d" " -`)"
	fi
    done
}

if [ `id -u` -ne  0 ]; then
    echo "You must be root to run this script."
    exit 1
fi

if test $# -eq 0; then
    help
elif test $1 = "-h"; then
    help
elif test $1 = "-d"; then # dummy flag
    exit 0
elif test $1 = "-l"; then
    get_explist expdata
elif test $1 = "-ln"; then
    get_explist nodes
elif test $1 = "-i"; then
    vi_name $2
elif test $1 = "-v"; then
    image_name=`vi_name $2`
    test $? -ne 0 && exit 2
    docker inspect -f '{{.Name}}' $image_name | tr -d "/"
elif test $1 = "-e"; then
    image_name=`vi_name $2`
    test $? -ne 0 && exit 2
    docker inspect -f '{{.Name}}' $image_name | tr -d "/" | cut -d"." -f1
elif test $1 = "-nt"; then
    image_name=`vi_name $2`
    test $? -ne 0 && exit 2
    shift 2
    if test -n "$*"; then
        exec docker exec -i $image_name "$@"
    else
        echo $command: command is missing 
        help
        exit 2
    fi
elif test $1 = "-n"; then
    image_name=`vi_name $2`
    test $? -ne 0 && exit 2
    docker inspect -f '{{.Name}}' $image_name | cut -d"." -f2
elif test $1 = "-b"; then
    image_name=`vi_name $2`
    test $? -ne 0 && exit 2
    shift 2
    if test -n "$*"; then
        exec docker exec -d $image_name "$@"
    else
        echo $command: command is missing 
        help
        exit 2
    fi
elif test `expr a$1 : "a-.*"` = "0"; then
    image_name=`vi_name $1`
    test $? -ne 0 && exit 2
    shift 1
    if test -z "$*"; then
	exec docker exec -it $image_name /bin/bash
    fi
    if [ -t 0 ]; then
	exec docker exec -it $image_name "$@"
    else
	exec docker exec -i $image_name "$@"
    fi
else
    echo $command: illegal option -- $1
    help
    exit 2
fi
